define([
  "app",
  "backbone",
  "modules/Owner/views",
  "modules/address",
  "modules/funding"
],

  function(app, Backbone, Views, Address, Funding) {
    var Owner = app.module();

    Owner.Model = Backbone.Model.extend({
      defaults: {
        "isPrimary": false,
        "isEditable": true,
        "serviceId": "",
        "nameTitle": "",
        "nameFirst": "",
        "nameMI": "",
        "nameLast": "",
        "nameSuffix": "",
        "dobYear": "",
        "dobMonth": "",
        "dobDay": "",
        "ssn1": "",
        "ssn2": "",
        "ssn3": "",
        "occupation": "",
        "phoneNumber1": "",
        "phoneNumber2": "",
        "phoneNumber3": "",
        "phoneType": "",
        "alternatePhoneNumber1": undefined,
        "alternatePhoneNumber2": undefined,
        "alternatePhoneNumber3": undefined,
        "alternatePhoneNumberType": undefined,
        "email": "",
        "needsPreviousAddress": undefined,
        "needsMailingAddress": undefined,
        "username": "",
        "password": "",
        "reenterPassword": "",
        "secretWord": "",
        "secretWordHint": "",
        "pin": "",
        associatedAccountCIDs: [],
        fundingAccounts: null
      },
      initialize: function() {
        // if we set these in defaults, by default all owners would share addresses
        this.attributes.homeAddress = new Address.Model({ typeLabel: "home" });
        this.attributes.previousAddress = new Address.Model({ typeLabel: "previous" });
        this.attributes.mailingAddress = new Address.Model({ typeLabel: "mailing" });

        if (_.isNull(this.get("fundingAccounts"))) {
          this.attributes.fundingAccounts = new Funding.AccountModelCollection();
        }
      },
      getSSN: function() {
            return "" + this.get("ssn1");
            return "" + this.get("ssn2");
            return "" + this.get("ssn3");
        },
        getEmail: function() {
            var email = this.get("email");
            return email;
        },
      getFullName: function() {
        // :TODO: we could do w/ ab more reliable app.utils.isEmptyString method
        var fullName = this.get("nameFirst");
        var nameTitle = this.get("nameTitle");
        if (nameTitle !== "") {
          fullName = nameTitle + " " + fullName;
        }
        var nameMI = this.get("nameMI");
        if (nameMI !== "") {
          fullName = fullName + " " + nameMI + ".";
        }
        fullName = fullName + " " + this.get("nameLast");
        var nameSuffix = this.get("nameSuffix");
        if (nameSuffix !== "") {
          fullName = fullName + " " + nameSuffix;
        }

        return fullName;
      },
      getDOB: function() {
        var dobM = this.get("dobMonth");
        var dobD = this.get("dobDay");
        var dobY = this.get("dobYear");
        var dob = dobM + "/" + dobD + "/" + dobY;
        return dob;
      },
      getSSN: function() {
        var ssn = this.get("ssn1") + "-" + this.get("ssn2") + "-" + this.get("ssn3");
        return ssn;
      },
      getPhoneNumber: function() {
        var n1 = this.get("phoneNumber1");
        var n2 = this.get("phoneNumber2");
        var n3 = this.get("phoneNumber3");
        var phoneNumber = "(" + n1 + ")-" + n2 + "-" + n3;
        return phoneNumber;
      },
	  getAlternateNumber: function() {
            var n1 = this.get("alternatePhoneNumber1");
            var n2 = this.get("alternatePhoneNumber2");
            var n3 = this.get("alternatePhoneNumber3");
            var AlternateNumber = "(" + n1 + ")-" + n2 + "-" + n3;
            return AlternateNumber;
        },
      serializeForViewTemplate: function() {
        var result = this.toJSON();

        result.fullName = this.getFullName();
        result.dob = this.getDOB();
        result.ssn = this.getSSN();
        result.phoneNumber = this.getPhoneNumber();
        result.AlternateNumber = this.getAlternateNumber();
        result.cid = this.cid;
        result.phoneDescription = this.getPhoneNumber() + " (" + this.get("phoneType") + ")";
        result.homeAddressFull = this.get("homeAddress").getLongHtmlDescription();
        result.hiddenSSN = this.getSSN();

        if (this.get("needsMailingAddress")) {
          result.mailingAddressFull = this.get("mailingAddress").getLongHtmlDescription();
        }
        else {
          result.mailingAddressFull = result.homeAddressFull;
        }

        result.writeOptions = app.utils.writeOptions;

        return result;
      },
      serializeForService: function() {
        var result = this.toJSON();
        result.cid = this.cid;
        return result;
      },
      // updates from json structure generated by service layer
      updateFromJSON: function(json) {
        Owner.loadFromJSON(json, this);
      }
    });

    Owner.Collection = Backbone.Collection.extend({
      model: Owner.Model,
      serializeForService: function() {
        return this.map(function(m) { return m.serializeForService(); });
      }
    });

    Owner.loadFromJSON = function(json, intoOwner) {
      var pickFields = [
        "nameTitle", "nameFirst", "nameMI", "nameLast", "nameSuffix", "dobYear", "dobMonth", "dobDay",
        "ssn1", "ssn2", "ssn3", "occupation", "phoneNumber1", "phoneNumber2", "phoneNumber3", "phoneType",
        "email", "needsMailingAddress", "needsPreviousAddress", "secretWord", "secretWordHint"
      ];
      var initObj = _(json).pick(pickFields);
      initObj.serviceId = json.customerId;

      var owner = intoOwner;
      if (_.isUndefined(owner)) { owner = new Owner.Model(initObj); }
      else { owner.set(initObj); }

      owner.set("homeAddress", Address.loadFromJSON(json.homeAddress));
      if (!_.isUndefined(json.mailingAddress)) {
        owner.set("mailingAddress", Address.loadFromJSON(json.mailingAddress));
      }
      if (!_.isUndefined(json.previousAddress)) {
        owner.set("previousAddress", Address.loadFromJSON(json.previousAddress));
      }

      var fundingAccounts = owner.get("fundingAccounts");
      if (!_.isUndefined(json.fundingAccounts)) {
        var accounts = _.map(json.fundingAccounts, function(fa) {
          return { nickname: fa.nickname, externalId: fa.accountCode, bankIsValid: true, isVerified: true };
        });

        fundingAccounts.add(accounts);
      }

      return owner;
    };

    // a trick so that owner views can init owners from service results without importing owner
    Owner.Model.loadFromJSON = Owner.loadFromJSON;

    Owner.Views = Views;

    return Owner;
  });